# DiseaseDetectionApp/core/ncbi_integration.py
import requests
import xml.etree.ElementTree as ET
import re

def get_pubmed_summary(disease_name, max_results=2, domain=None):
    """
    Fetches recent research summaries for a given disease from the PubMed database.
    Improved to include domain for better relevance (e.g., plant, human, animal).
    Enhanced error handling and search term refinement.
    """
    print(f"Searching PubMed for articles related to: '{disease_name}' in domain: '{domain}'")
    base_url = "https://eutils.ncbi.nlm.nih.gov/entrez/eutils/"

    # Refine search term: Clean disease name, add domain if provided
    cleaned_disease = re.sub(r'[^\w\s]', '', disease_name).strip()
    search_term = f'"{cleaned_disease}"[Title/Abstract]'
    if domain and domain.lower() in ['plant', 'human', 'animal']:
        search_term += f' AND {domain}[Title/Abstract]'

    try:
        # Step 1: Search PubMed for article IDs (PMIDs).
        search_url = f"{base_url}esearch.fcgi?db=pubmed&term={search_term}&retmax={max_results}&sort=relevance"
        response = requests.get(search_url, timeout=10)
        response.raise_for_status()

        root = ET.fromstring(response.content)
        id_list = [elem.text for elem in root.findall('.//Id')]

        if not id_list:
            print("No relevant articles found on PubMed.")
            return "No recent research articles were found on PubMed for this topic."

        # Step 2: Fetch the summaries for the found article IDs.
        ids = ",".join(id_list)
        fetch_url = f"{base_url}efetch.fcgi?db=pubmed&id={ids}&retmode=xml&rettype=abstract"
        fetch_response = requests.get(fetch_url, timeout=10)
        fetch_response.raise_for_status()

        fetch_root = ET.fromstring(fetch_response.content)
        articles = fetch_root.findall('.//PubmedArticle')

        summary_texts = []
        for article in articles:
            title_elem = article.find('.//ArticleTitle')
            abstract_elem = article.find('.//AbstractText')

            title = title_elem.text if title_elem is not None and title_elem.text else "No Title Available"
            abstract = abstract_elem.text if abstract_elem is not None and abstract_elem.text else "No Abstract Available"

            # Format for UI display
            summary_texts.append(f"  â€¢ <b>{title}</b><br>    <i>{abstract[:200]}...</i>")

        if not summary_texts:
            return "Found articles, but could not extract their summaries."

        return "<br><br>".join(summary_texts)

    except requests.exceptions.Timeout:
        print("PubMed request timed out.")
        return "The request to the PubMed database timed out. Please try again later."
    except requests.exceptions.RequestException as e:
        print(f"A network error occurred while contacting PubMed: {e}")
        return "Could not connect to the PubMed database. Please check your internet connection."
    except ET.ParseError as e:
        print(f"Error parsing XML response from PubMed: {e}")
        return "Failed to parse the response from the PubMed database. The data may be malformed."
    except Exception as e:
        print(f"An unexpected error occurred during PubMed integration: {e}")
        return "An unexpected error occurred while fetching research data."

def generate_ncbi_report(disease_name, pubmed_summary, domain=None, output_path="ncbi_report.html"):
    """
    Generates a simple HTML report from PubMed summaries for a disease.
    """
    html_content = f"""
    <!DOCTYPE html>
    <html lang="en">
    <head>
        <meta charset="UTF-8">
        <title>NCBI PubMed Report for {disease_name}</title>
        <style>
            body {{ font-family: Arial, sans-serif; margin: 20px; }}
            h1 {{ color: #333; }}
            h2 {{ color: #666; }}
            .summary {{ margin-bottom: 20px; }}
        </style>
    </head>
    <body>
        <h1>NCBI PubMed Research Report</h1>
        <h2>Disease: {disease_name}</h2>
        {f"<p><strong>Domain:</strong> {domain}</p>" if domain else ""}
        <div class="summary">
            <h3>Recent Research Summaries</h3>
            {pubmed_summary.replace('<br><br>', '</p><p>')}
        </div>
        <p><em>Report generated by Multi-Species Disease Detection System</em></p>
    </body>
    </html>
    """

    try:
        with open(output_path, 'w', encoding='utf-8') as f:
            f.write(html_content)
        print(f"NCBI report saved to {output_path}")
        return True, output_path
    except Exception as e:
        print(f"Error generating NCBI report: {e}")
        return False, str(e)
